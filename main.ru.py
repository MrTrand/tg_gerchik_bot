# main.ru.py ‚Äî –±–æ—Ç-—Ç–µ—Å—Ç–µ—Ä –Ω–∞ aiogram 3, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç polling –∏ webhook (aiohttp)
# –ó–∞–≤–∏—Å–∏om—Å—Ç–∏: aiogram>=3.22, aiohttp>=3.12
# –†—è–¥–æ–º –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å questions.json (–º—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏)

import asyncio, os, json
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- webhook / aiohttp ---
from aiohttp import web
from aiogram.types import Update

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –ó–∞–¥–∞–π –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞.")

# –ï—Å–ª–∏ WEBHOOK_URL –∑–∞–¥–∞–Ω ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")       # –Ω–∞–ø—Ä. https://your-service.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")  # –ª—é–±–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤ URL, –∏ –∫–∞–∫ header secret)
PORT = int(os.getenv("PORT", "8080"))         # Render –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–≤–æ–π –ø–æ—Ä—Ç
USE_WEBHOOK = bool(WEBHOOK_BASE)

# ====== –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ ======
HERE = Path(__file__).resolve().parent
QUEST_PATH = HERE / "questions.json"
if not QUEST_PATH.exists():
    raise FileNotFoundError(f"–ù–µ –Ω–∞—à—ë–ª —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {QUEST_PATH}")

with QUEST_PATH.open("r", encoding="utf-8") as f:
    DATA = json.load(f)

QUESTIONS: list[dict] = DATA["questions"]
TYPES: dict = DATA["meta"]["types"]
TIE_THRESHOLD: int = DATA["meta"].get("scoring", {}).get("tie_threshold", 2)

# ====== –ë–æ—Ç –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è ======
bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

class Quiz(StatesGroup):
    active = State()

def build_kb(q: dict, selected: list[int]) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    qid = q["id"]
    for opt in q["options"]:
        opt_id = opt["id"]
        checked = "‚úÖ " if opt_id in selected else "‚óªÔ∏è "
        kb.button(text=checked + opt["text"], callback_data=f"opt|{qid}|{opt_id}")
    kb.adjust(1)
    min_sel = q.get("min_select", 1)
    max_sel = q.get("max_select", 1)
    if max_sel != 1:
        kb.button(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"next|{qid}")
        kb.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"clear|{qid}")
        kb.adjust(1)
    return kb.as_markup()

async def ask_question(message_obj: types.Message, q_index: int, selected: list[int] | None = None):
    q = QUESTIONS[q_index]
    if selected is None:
        selected = []
    await message_obj.answer(q["text"], reply_markup=build_kb(q, selected))

@router.message(CommandStart())
async def on_start(msg: types.Message, state: FSMContext):
    codes = list(TYPES.keys())
    await state.set_state(Quiz.active)
    await state.update_data(idx=0, selected=[], scores={c: 0 for c in codes})
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –Ω–∞ —Ç–∏–ø —Ç—Ä—É–¥–æ–≤–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ñ–º–∏ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ.")
    await ask_question(msg, 0, [])

@router.message(Command("reset"))
async def on_reset(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–°–±—Ä–æ—Å–∏–ª. –ù–∞–±–µ—Ä–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")

@router.callback_query(Quiz.active, F.data.startswith("opt|"))
async def on_toggle(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"]
    cur_q = QUESTIONS[idx]
    cur_qid = cur_q["id"]

    try:
        _, qid_str, opt_id_str = cb.data.split("|", 2)
        qid = int(qid_str)
        opt_id = int(opt_id_str)
    except Exception:
        await cb.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.", show_alert=True)
        return

    if qid != cur_qid:
        msg = ("–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
               if qid < cur_qid else "–î–æ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –º—ã –µ—â—ë –Ω–µ –¥–æ—à–ª–∏ üôÇ")
        await cb.answer(msg, show_alert=True)
        return

    max_sel = cur_q.get("max_select", 1)

    if max_sel == 1:
        await apply_awards(cur_q, [opt_id], state)
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await cb.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ")
        await goto_next(cb, state)
        return

    selected: list[int] = data.get("selected", [])
    if opt_id in selected:
        selected.remove(opt_id)
    else:
        if len(selected) >= max_sel:
            await cb.answer(f"–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ {max_sel}.", show_alert=True)
            return
        selected.append(opt_id)

    await state.update_data(selected=selected)
    await cb.message.edit_reply_markup(reply_markup=build_kb(cur_q, selected))
    await cb.answer()

@router.callback_query(Quiz.active, F.data.startswith("clear|"))
async def on_clear(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"]
    cur_q = QUESTIONS[idx]
    cur_qid = cur_q["id"]

    _, qid_str = cb.data.split("|", 1)
    if int(qid_str) != cur_qid:
        await cb.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
        return

    await state.update_data(selected=[])
    await cb.message.edit_reply_markup(reply_markup=build_kb(cur_q, []))
    await cb.answer("–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω.")

@router.callback_query(Quiz.active, F.data.startswith("next|"))
async def on_next(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"]
    q = QUESTIONS[idx]
    cur_qid = q["id"]

    _, qid_str = cb.data.split("|", 1)
    if int(qid_str) != cur_qid:
        await cb.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
        return

    selected: list[int] = data.get("selected", [])
    min_sel = q.get("min_select", 1)
    max_sel = q.get("max_select", 1)

    if not (min_sel <= len(selected) <= max_sel):
        await cb.answer(f"–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç {min_sel} –¥–æ {max_sel}.", show_alert=True)
        return

    await apply_awards(q, selected, state)
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await cb.answer("–û—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã ‚úÖ")
    await goto_next(cb, state)

# ====== –°–ª—É–∂–µ–±–Ω—ã–µ ======

async def apply_awards(q: dict, chosen_ids: list[int], state: FSMContext):
    data = await state.get_data()
    scores: dict = data["scores"]
    by_id = {opt["id"]: opt for opt in q["options"]}

    for oid in chosen_ids:
        opt = by_id.get(oid)
        if not opt:
            continue
        for award in opt.get("awards", []):
            tcode = award["type"]
            pts = int(award.get("points", 1))
            scores[tcode] = scores.get(tcode, 0) + pts

    await state.update_data(scores=scores, selected=[])

def _get_advice_or_summary(code: str) -> str | None:
    info = TYPES.get(code, {})
    return info.get("advice") or info.get("summary")

async def goto_next(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"] + 1
    await state.update_data(idx=idx, selected=[])

    if idx < len(QUESTIONS):
        await ask_question(cb.message, idx, [])
        return

    scores: dict = data["scores"]
    await state.clear()

    ranked = sorted(scores.items(), key=lambda kv: kv[1], reverse=True)
    top1_code, top1_pts = ranked[0]
    top2_code, top2_pts = ranked[1] if len(ranked) > 1 else (None, None)

    lines: list[str] = []
    lines.append("üèÅ –ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥–∏:")
    for code, pts in ranked:
        name = TYPES.get(code, {}).get("name", code)
        lines.append(f"‚Ä¢ {name} ({code}): {pts}")

    if top2_code and (top1_pts - top2_pts) <= TIE_THRESHOLD:
        name1 = TYPES.get(top1_code, {}).get("name", top1_code)
        name2 = TYPES.get(top2_code, {}).get("name", top2_code)
        lines.append(f"\nüî∏ –í–µ–¥—É—â–∏–µ —Ç–∏–ø—ã: {name1} –∏ {name2} (—Ä–∞–∑–Ω–∏—Ü–∞ {top1_pts - top2_pts}).")
        adv1 = _get_advice_or_summary(top1_code)
        adv2 = _get_advice_or_summary(top2_code)
        if adv1:
            lines.append(f"\n{name1}: {adv1}")
        if adv2:
            lines.append(f"\n{name2}: {adv2}")
    else:
        name1 = TYPES.get(top1_code, {}).get("name", top1_code)
        lines.append(f"\nüî∏ –í–µ–¥—É—â–∏–π —Ç–∏–ø: {name1}.")
        adv1 = _get_advice_or_summary(top1_code)
        if adv1:
            lines.append(f"\n{name1}: {adv1}")

    lines.append("\n–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –∑–∞–Ω–æ–≤–æ, /reset ‚Äî —Å–±—Ä–æ—Å.")
    await cb.message.answer("\n".join(lines))

# ====== –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ ======

async def run_polling():
    print("Polling-—Ä–µ–∂–∏–º: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ —á–∞—Ç–µ.")
    await dp.start_polling(bot)

async def run_webhook():
    if not WEBHOOK_SECRET:
        raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω.")
    webhook_path = f"/webhook/{WEBHOOK_SECRET}"
    webhook_url = f"{WEBHOOK_BASE}{webhook_path}"

    async def handle_webhook(request: web.Request):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∏ –ø—É—Ç–∏
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
            return web.Response(status=401, text="unauthorized")
        data = await request.json()
        update = Update.model_validate(data, context={"bot": bot})
        await dp.feed_update(bot, update)
        return web.Response(status=200)

    async def health(_):
        return web.Response(text="ok")

    app = web.Application()
    app.add_routes([
        web.post(webhook_path, handle_webhook),
        web.get("/healthz", health),
    ])

    async def on_startup(_):
        # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –Ω–∞ –Ω—É–∂–Ω—ã–π URL —Å —Å–µ–∫—Ä–µ—Ç–æ–º
        await bot.set_webhook(webhook_url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
        print(f"Webhook set to {webhook_url}")

    async def on_shutdown(_):
        # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞
        try:
            await bot.delete_webhook(drop_pending_updates=True)
        except Exception:
            pass

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    print(f"Webhook-—Ä–µ–∂–∏–º: —Å–ª—É—à–∞—é –ø–æ—Ä—Ç {PORT}, –ø—É—Ç—å {webhook_path}")
    await site.start()

    # ¬´—Å–ø–∏–º¬ª –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ë—Ç
    while True:
        await asyncio.sleep(3600)

async def main():
    if USE_WEBHOOK:
        await run_webhook()
    else:
        await run_polling()

if __name__ == "__main__":
    asyncio.run(main())
